// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model User {
	id              Int             @id @unique @default(autoincrement())
	idIntra         String          @unique
	userName        String          @unique
	email           String          @default("")
	tel             String          @default("")
	img             String  	  	@db.Text()
	firstName       String
	lastName        String
	createdAt		DateTime  		@default(now())
	twoFa           Boolean         @default(false)
	otpSecret       String          @default("")
	otpUrl          String          @default("")
	winRow			Int				@default(0) // Vittorie di fila
	win             Int             @default(0)
	loss            Int             @default(0)
	rank            Int             @default(100)
	achFirstWin		Boolean			@default(false)
	achRealLoser	Boolean			@default(false)
	achFiveinRow	Boolean			@default(false)
	achTeninRow		Boolean			@default(false)
	achTwentyinRow	Boolean			@default(false)
	achAce			Boolean			@default(false)
	status			Int				@default(0)
	lastOnline		DateTime?
	friend        	Friend[]       	@relation(name: "friend")
	friendBy       	Friend[]       	@relation(name: "friendBy")
	blocked         Blocklist[]     @relation(name: "block")
	blockedby       Blocklist[]     @relation(name: "blocked")
	invited			Invited[]		@relation(name: "invited")
	invitedBy		Invited[]		@relation(name: "invitedBy")
	partecipant		Partecipant[]
	messages		Message[]
	accessToken		String			@default("")
	firstLogin		Int				@default(0)
}

model Friend {
	friendId		String
	friendById		String
	addedAt		DateTime  		@default(now())
	friendBy	User	@relation(name: "friendBy", fields: [friendById], references: [idIntra])
	friend		User	@relation(name: "friend", fields: [friendId], references: [idIntra])
	@@id([friendId, friendById])
}

model Invited {
	invitedId		String
	invitedById		String
	type			String @default("friend")
	invitedBy	User	@relation(name: "invitedBy", fields: [invitedById], references: [idIntra])
	invited		User	@relation(name: "invited", fields: [invitedId], references: [idIntra])

	@@id([invitedId, invitedById])

}

model Blocklist {
	blockId   		String
	blockedId 		String

	block    		User    		@relation(name: "block", fields: [blockId], references: [idIntra])
	blocked     	User    		@relation(name: "blocked", fields: [blockedId], references: [idIntra])

	@@id([blockId, blockedId])
}

model Games {
	idGame                Int             	@id @default(autoincrement())
	startedAt			  DateTime  		@default(now())
	endedAt				  DateTime?
	user1                 String
	user2                 String
	scoreP1               Int             	@default(0)
	scoreP2               Int            	@default(0)
	status				  Int		  		@default(0)
	type				  Int 				@default(0)
}

model Partecipant{
	idIntra 	String
	idChat		Int
	user		User			@relation(fields: [idIntra], references: [idIntra])
	chat		Chat			@relation( fields: [idChat], references: [id], onDelete: Cascade)
	owner		Boolean			@default(false)
	admin		Boolean			@default(false)
	joinedAt	DateTime  		@default(now())
	mutedAt		DateTime?
	mutedUntil	DateTime?
	bannedAt	DateTime?
	bannedUntil	DateTime?


	@@id([idIntra, idChat])
}

model Chat {
	id					Int			@unique @default(autoincrement())
	name				String?
	type				String		@default("public")
	password			String?
	partecipant			Partecipant[] 
	invited				String[]
	messages			Message[] 
	createdAt			DateTime  		@default(now())
}

model Message {
	id 					Int 		@unique @default(autoincrement())
	message 			String
	idChat				Int
	idIntra				String
	sendedAt			DateTime  	@default(now())
	users				User		@relation(fields: [idIntra], references: [idIntra])
	chat				Chat		@relation( fields: [idChat], references: [id], onDelete: Cascade)
}
