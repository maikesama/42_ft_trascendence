version: '3.8'

services:

  frontend2:
    image: "frontend2"
    build:
      dockerfile: 'Dockerfile'
      context: ./frontend
    volumes:
      - ./frontend/src:/app/src
    expose:
      - "3000"
    environment:
      REACT_APP_HOST_URI: ${REACT_APP_HOST_URI}
      # WDS_SOCKET_PORT: ${WDS_SOCKET_PORT}
    container_name: frontend2
    depends_on:
      - "backend"
    networks:
      - trascendecne
  # frontend:
  #   image: "node:16-slim"
  #   user: "node"
  #   build:
  #     dockerfile: 'Dockerfile.prod'
  #     context: ./frontend
  #   working_dir: /home/node/app
  #   restart: unless-stopped
  #   volumes:
  #     - ./frontend:/home/node/app
  #   expose:
  #     - "3000"
  #   environment:
  #     REACT_APP_HOST_URI: ${REACT_APP_HOST_URI}
  #   container_name: frontend
  #   # command: sh -c "npm cache clean --force; rm -rf node_modules build; npm install --legacy-peer-deps; npm run build; npm install serve --legacy-peer-deps; npx serve -s build"
  #  # command: sh -c "npm cache clean --force; rm -rf node_modules build; npm install --legacy-peer-deps; npm audit fix --force --legacy-peer-deps; npm run build; npm install serve --legacy-peer-deps; npx serve -s build"
  #   depends_on:
  #     - "backend"
  #   networks:
  #     - trascendecne

    # command: sh -c "npm install; npm run build; npm install serve; npx serve -s build"
    # command: "npm install --legacy-peer-deps; react-scripts start;"
  backend:
    image: "backend"
    build:
      dockerfile: 'Dockerfile'
      context: ./backend
    restart: unless-stopped
    volumes:
      - ./backend/src:/app/src
    expose:
      - "3333"
      - "4244"
    ports:
      - "8080:5555"
    environment:
      HOST: ${REACT_APP_HOST_URI}
      DATABASE_URL: ${DATABASE_URL}
      # WDS_SOCKET_PORT: ${WDS_SOCKET_PORT}
    container_name: backend
    depends_on:
      - "database"
    networks:
      - trascendecne


  database:
    image: postgres:13
    expose:
      - "5432"
    container_name: database
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - trascendecne
  # redis:
  #   image: redis:latest
  #   ports:
  #     - '6379:6379'

  # rcli:
  #   image: redis:latest
  #   links:
  #     - redis
  #   command: redis-cli -h redis

  proxy:
    container_name: proxy
    image: proxy
    build:
      context: ./proxy
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "8002:8002"
      - "8003:8003"
    depends_on:
      - frontend
      - backend
    restart: always
    networks:
      - trascendecne

  adminer:
    container_name: adminer
    image: adminer
    ports:
      - 8081:8080
    restart: always
    networks:
      - trascendecne


networks:
  trascendecne:
